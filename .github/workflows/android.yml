name: Docker KVM Android 13 Emulator via Tailscale Final

on:
  workflow_dispatch:

permissions:
  contents: read

env:
  # Konfigurasi Umum
  VNC_USER: runner
  NOVNC_PORT: 6080
  # Konfigurasi Tailscale
  TS_HOSTNAME: gh-kvm-android
  # Konfigurasi Docker
  DOCKER_IMAGE: budtmo/docker-android:emulator_13.0
  EMULATOR_BOOT_TIME: 30 # Waktu tunggu boot Emulator
  
jobs:
  run-docker-emulator:
    runs-on: ubuntu-latest 
    timeout-minutes: 370
    
    steps:
      - uses: actions/checkout@v4
      
      # --- 1. DOCKER SETUP & CACHE RESTORE ---
      - name: Cache Restore Docker Layers
        id: cache-docker-restore
        uses: actions/cache@v3
        with:
          path: /var/lib/docker
          key: ${{ runner.os }}-docker-${{ hashFiles('run-docker-image-key') }} 
          restore-keys: |
            ${{ runner.os }}-docker-
            
      - name: Pull Docker Image if not cached
        if: steps.cache-docker-restore.outputs.cache-hit != 'true'
        run: |
          echo "Docker cache not hit. Pulling image..."
          docker pull ${{ env.DOCKER_IMAGE }}
          touch run-docker-image-key

      # 2. AKTIVASI KVM DI HOST RUNNER
      - name: Enable KVM Hardware Acceleration
        run: |
          echo ">>> Enabling KVM permissions on host..."
          echo 'KERNEL=="kvm", GROUP="kvm", MODE="0666", OPTIONS+="static_node=kvm"' | sudo tee /etc/udev/rules.d/99-kvm4all.rules
          sudo udevadm control --reload-rules
          sudo udevadm trigger --name-match=kvm
          sudo usermod -aG kvm $USER
          
      # 3. TAILSCALE INSTALL
      - name: Install Tailscale
        run: |
          echo ">>> Installing Tailscale on Host..."
          curl -fsSL https://tailscale.com/install.sh | sudo sh
          sudo chown -R $USER:$USER /var/lib/tailscale
          
      # 4. TAILSCALE CACHE RESTORE
      - name: Cache Restore Tailscale State
        id: cache-ts-restore
        uses: actions/cache@v3
        with:
          path: /var/lib/tailscale
          key: ${{ runner.os }}-tailscale-${{ runner.arch }}-${{ env.TS_HOSTNAME }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-tailscale-${{ runner.arch }}-${{ env.TS_HOSTNAME }}-
            
      # 5. TAILSCALE UP (Background Run & Non-blocking)
      - name: Tailscale up Background Run
        run: |
          AUTH_KEY="${{ vars.AUTHKEY }}"
          
          AUTH_PARAM=""
          if [[ "${{ steps.cache-ts-restore.outputs.cache-hit }}" != "true" ]]; then
              echo "Cache Tailscale tidak ditemukan, menggunakan Authkey."
              if [ -z "$AUTH_KEY" ]; then
                echo "Error: vars.AUTHKEY is empty. Set the Auth Key in Repository Variables."
                exit 1
              fi
              sudo tailscaled &
              sleep 2
              AUTH_PARAM="--authkey $AUTH_KEY"
          else
              echo "Cache Tailscale ditemukan, terhubung kembali."
              sudo tailscaled &
              sleep 2
          fi
          
          echo ">>> Connecting Tailscale (non-blocking)..."
          # Menggunakan --timeout=5s untuk menghindari error parse dan Job Timeout 1m
          sudo tailscale up \
            $AUTH_PARAM \
            --hostname ${{ env.TS_HOSTNAME }} \
            --accept-routes \
            --accept-dns=false \
            --timeout=5s \
            --reset
            
          sleep 5

      # 6. MENJALANKAN DOCKER EMULATOR
      - name: Run Docker Android Emulator
        id: run-docker
        run: |
          echo ">>> Running Docker Emulator..."
          
          if [ ! -e /dev/kvm ]; then
            echo "WARNING: /dev/kvm not found. Emulator might fail or run slow."
          fi
          
          docker run \
            --privileged \
            --detach \
            --network=host \
            --name=android-emu \
            --device=/dev/kvm \
            ${{ env.DOCKER_IMAGE }}
            
          echo "Menunggu container dan emulator boot (${{ env.EMULATOR_BOOT_TIME }} detik)..."
          sleep ${{ env.EMULATOR_BOOT_TIME }}
          
          echo "=== DOCKER CONTAINER LOGS ==="
          docker logs android-emu
          echo "============================="
          
          if ! docker ps | grep -q "android-emu"; then
            echo "Error: Docker container stopped unexpectedly after startup."
            exit 1
          fi

      # 7. MENJALANKAN WEBSOCKIFY SECARA MANUAL
      - name: Manual noVNC Websockify Startup Path Fix
        run: |
          echo ">>> Container is running. Starting websockify manually..."
          # Fix path websockify
          docker exec -d android-emu /usr/local/bin/websockify ${{ env.NOVNC_PORT }} localhost:5901
          
          echo "Websockify started on port ${{ env.NOVNC_PORT }}."
          sleep 5

      # 8. TAMPILKAN URL DAN JAGA TETAP HIDUP
      - name: Show Connection URL and Keep Alive
        run: |
          echo "Menunggu Tailscale Online..."
          for i in $(seq 1 30); do
              if /usr/bin/tailscale status --json | jq -e '.Self.Online' > /dev/null; then
                  break
              fi
              sleep 1
              if [ $i -eq 30 ]; then
                echo "Error: Tailscale failed to connect within 30 seconds."
                exit 1
              fi
          done
          
          TAILSCALE_IP=$(tailscale ip -4 | head -n1)
          VNC_URL="http://${TAILSCALE_IP}:${{ env.NOVNC_PORT }}/vnc.html"

          echo "==========================================="
          echo "=== KONEKSI DOCKER KVM VIA TAILSCALE ==="
          echo "==========================================="
          echo "URL NO VNC (Akses dari Browser Anda):"
          echo "${VNC_URL}"
          echo "==========================================="
          
          echo ">>> Keeping runner and container alive (Timeout 370 mins)..."
          while true; do
            if ! docker ps | grep -q "android-emu"; then
              echo "Docker container stopped. Ending job."
              exit 1
            fi
            
            docker exec android-emu adb shell echo "Container is alive." || true
            
            sleep 300 
          done

      # ----------------------------------------------------------------------
      # --- 9. CLEANUP DAN CACHE SAVE (Dijalankan Selalu - if: always()) ---
      # ----------------------------------------------------------------------
      
      # Logout dan Hapus Container (Harus dijalankan paling awal di cleanup)
      - name: 🗑️ Cleanup Tailscale and Docker
        if: always()
        id: cleanup_step
        run: |
          echo ">>> Running cleanup (Docker stop, Tailscale logout)."
          # 1. Hapus container Docker agar file locks/handles dilepas
          docker rm -f android-emu || true 
          
          # 2. Logout Tailscale dari runner saat ini
          sudo tailscale down || true
          sudo tailscale logout || true
          
          echo "Cleanup Complete."
          
      # Perbaiki Perizinan Docker (Dijalankan setelah container dihapus)
      - name: 🔒 Fix Docker Cache Permissions
        if: always()
        run: |
          echo ">>> Temporarily fixing permissions for cache save..."
          # Mengubah kepemilikan /var/lib/docker ke user runner
          sudo chown -R $USER:$USER /var/lib/docker || true
          
      # Tailscale State Save
      - name: 📦 Cache Save Tailscale State
        uses: actions/cache/save@v3
        if: always()
        with:
          path: /var/lib/tailscale
          key: ${{ runner.os }}-tailscale-${{ runner.arch }}-${{ env.TS_HOSTNAME }}-${{ github.sha }}
          
      # Docker Layer Save
      - name: 📦 Cache Save Docker Layers
        uses: actions/cache/save@v3
        if: always()
        with:
          path: /var/lib/docker
          key: ${{ runner.os }}-docker-${{ hashFiles('run-docker-image-key') }}
