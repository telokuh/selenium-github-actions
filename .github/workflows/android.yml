name: Linux VNC via Tailscale (Android)

on:
  workflow_dispatch:

concurrency:
  group: tailscale-rdp-singleton
  cancel-in-progress: false

permissions:
  contents: read
  actions: read

defaults:
  run:
    shell: bash

env:
  TS_HOSTNAME: bullet
  VNC_PASS: Bullet@12345
  VNC_PORT: 5901
  ANDROID_API: 30
  AVD_NAME: MyAndroidDevice
  # Variabel ini penting untuk memastikan sdkmanager dan avdmanager ditemukan
  ANDROID_SDK_ROOT: ${{ github.workspace }}/android_sdk 
  
jobs:
  rdp:
    runs-on: ubuntu-latest
    timeout-minutes: 370
    
    steps:
      - name: üîß Resolve inputs (safe)
        id: cfg
        env:
          RAW_TAILNET: ${{ vars.TAILNET }}
          RAW_APIKEY: ${{ vars.APIKEY }}
          RAW_AUTHKEY: ${{ vars.AUTHKEY }}
          RAW_PAT: ${{ vars.GH_TOKEN }}
          RAW_TEST: false
          RAW_RUNTIME: 60
          RAW_LOOPS: 0
        run: |
          toIntOr() {
            if [[ "$1" =~ ^[0-9]+$ ]]; then echo "$1"; else echo "$2"; fi
          }

          tailnet="${RAW_TAILNET}"
          apiKey="${RAW_APIKEY}"
          authKey="${RAW_AUTHKEY}"
          pat="${RAW_PAT}"
          
          if [[ -z "$tailnet" || -z "$apiKey" || -z "$authKey" || -z "$pat" ]]; then
            echo "Missing required inputs (TAILNET, APIKEY, AUTHKEY, GH_TOKEN variables must be set)."
            exit 1
          fi

          isTest=$(echo "${RAW_TEST}" | grep -iqE 'true|1|yes|on' && echo "true" || echo "false")
          runtime=$(toIntOr "${RAW_RUNTIME}" 355)
          if [[ "$isTest" == "true" ]]; then runtime=5; fi
          if [[ "$isTest" == "false" && "$runtime" -lt 6 ]]; then runtime=355; fi
          if [[ "$runtime" -gt 360 ]]; then runtime=355; fi

          loops=$(toIntOr "${RAW_LOOPS}" 0)
          if [[ "$loops" -lt 0 ]]; then loops=0; fi

          echo "tailnet=$tailnet" >> $GITHUB_OUTPUT
          echo "apikey=$apiKey" >> $GITHUB_OUTPUT
          echo "authkey=$authkey" >> $GITHUB_OUTPUT
          echo "pat=$pat" >> $GITHUB_OUTPUT
          echo "runtime=$runtime" >> $GITHUB_OUTPUT
          echo "loops=$loops" >> $GITHUB_OUTPUT
          echo "Resolved: test=$isTest, runtime=$runtime, loops=$loops"
          
      - name: Grant permissions to APT cache
        run: |
          sudo chown -R $USER:$USER /var/cache/apt
          sudo chown -R $USER:$USER /var/lib/apt
          
      - name: Cache APT packages
        uses: actions/cache@v3
        with:
          path: |
            /var/cache/apt/archives
            /var/lib/apt/lists
          key: ${{ runner.os }}-apt-${{ runner.arch }}-${{ hashFiles('**/install-desktop.sh') }}
          restore-keys: |
            ${{ runner.os }}-apt-${{ runner.arch }}-

      - name: üíª Install Desktop Environment & VNC Server
        run: |
          echo 'set man-db/auto-update false' | sudo debconf-communicate >/dev/null
          sudo dpkg-reconfigure man-db 
          # Chromium dihapus
          sudo DEBIAN_FRONTEND=noninteractive apt-get install --no-install-recommends -y xfce4 xfce4-goodies tightvncserver xfonts-base jq
          
          # Konfigurasi VNC Password
          mkdir -p ~/.vnc
          echo "${{ env.VNC_PASS }}" | vncpasswd -f > ~/.vnc/passwd
          chmod 600 ~/.vnc/passwd
          
          # Buat file startup VNC (xstartup)
          echo '#!/bin/bash
          xrdb $HOME/.Xresources
          startxfce4 &' > ~/.vnc/xstartup
          chmod +x ~/.vnc/xstartup
          
          # Jalankan VNC Server di background
          vncserver :1 -geometry 1280x800 -depth 24
          echo "VNC Server dijalankan di port ${{ env.VNC_PORT }}"

      - name: ‚öôÔ∏è Install Tailscale
        run: |
          curl -fsSL https://tailscale.com/install.sh | sh
          sudo chown -R $USER:$USER /var/lib/tailscale
          
      - name: üì¶ Cache Tailscale State
        id: cache-ts
        uses: actions/cache@v3
        with:
          path: /var/lib/tailscale
          key: ${{ runner.os }}-tailscale-${{ runner.arch }}-${{ env.TS_HOSTNAME }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-tailscale-${{ runner.arch }}-${{ env.TS_HOSTNAME }}-

     

      - name: üîó Tailscale up (Persistent)
        id: up
        run: |
          # Parameter yang dibutuhkan untuk koneksi (selalu ada)
          CONN_PARAMS="--accept-routes --accept-dns=false --timeout=0"
          
          # Parameter yang hanya dibutuhkan untuk pendaftaran (authkey dan hostname)
          REGISTRATION_PARAMS=""

          if [[ "${{ steps.cache-ts.outputs.cache-hit }}" != "true" ]]; then
              echo "Cache Tailscale tidak ditemukan (Run pertama), menggunakan Authkey dan Hostname untuk pendaftaran."
              # Gabungkan authkey DAN hostname ke dalam REGISTRATION_PARAMS
              REGISTRATION_PARAMS="--authkey ${{ steps.cfg.outputs.authkey }} --hostname ${{ env.TS_HOSTNAME }}"
          else
              echo "Cache Tailscale ditemukan (Perangkat sudah terdaftar), terhubung kembali dengan kunci yang ada."
              # Pada run berikutnya, kita hanya perlu memastikan hostname sudah disetel
              CONN_PARAMS="${CONN_PARAMS} --hostname ${{ env.TS_HOSTNAME }}"
          fi
          
          # Jalankan tailscale up dengan semua parameter yang diperlukan
          sudo tailscale up ${REGISTRATION_PARAMS} ${CONN_PARAMS}
            
          sleep 5
      
      
      
      
      - name: ‚è±Ô∏è Wait for Tailscale to be Online
        id: wait_ts
        run: |
          timeout=60
          ts_path="/usr/bin/tailscale"
          
          for i in $(seq 1 $timeout); do
              # Periksa status
              status_json=$($ts_path status --json 2>/dev/null)
              if echo "$status_json" | grep -q '"Self":{"Online":true'; then
                  echo "Tailscale is now online."
                  break
              fi
              echo "Waiting for Tailscale to connect... ($i/$timeout s)"
              sleep 1
          done

          if ! echo "$status_json" | grep -q '"Online": true'; then
              echo "Timeout waiting for Tailscale to come online."
              exit 1
          fi
          
          ip4=$($ts_path ip -4 | head -n 1)
          fqdn=$(echo "$status_json" | jq -r '.Self.DNSName')
          
          echo "ip4=$ip4" >> $GITHUB_OUTPUT
          echo "fqdn=$fqdn" >> $GITHUB_OUTPUT
          echo "VNC Address: ${ip4}:${{ env.VNC_PORT }}"

      # Menggunakan variabel ANDROID_SDK_ROOT untuk lokasi SDK yang persisten
      - name: ü§ñ Setup Java (Required for SDK)
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: üì¶ Cache Android SDK Components
        id: cache-sdk
        uses: actions/cache@v3
        with:
          path: |
            ${{ env.ANDROID_SDK_ROOT }}/platforms
            ${{ env.ANDROID_SDK_ROOT }}/system-images
            ${{ env.ANDROID_SDK_ROOT }}/platform-tools
            ${{ env.ANDROID_SDK_ROOT }}/cmdline-tools
          # Tambahkan ANDROID_API ke key agar cache berubah jika API berubah
          key: ${{ runner.os }}-android-sdk-${{ env.ANDROID_API }}-${{ hashFiles('**/sdk-install-marker.txt') }}
          restore-keys: |
            ${{ runner.os }}-android-sdk-${{ env.ANDROID_API }}-
          
      - name: üîß Install Android SDK Components
        if: steps.cache-sdk.outputs.cache-hit != 'true'
        run: |
          # Instalasi SDK ke direktori yang kita kontrol
          mkdir -p ${{ env.ANDROID_SDK_ROOT }}
          echo "y" | sdkmanager --install "platform-tools" "platforms;android-${{ env.ANDROID_API }}" "system-images;android-${{ env.ANDROID_API }};google_apis;x86_64"
          
          touch sdk-install-marker.txt # File penanda agar cache tahu kapan harus diperbarui

      # Langka baru: Memastikan AVD dibuat di setiap run (tidak kena cache)
      - name: üèóÔ∏è Create AVD
        run: |
          # Perlu menambahkan path ke tools agar sdkmanager/avdmanager dikenal
          echo "${{ env.ANDROID_SDK_ROOT }}/platform-tools" >> $GITHUB_PATH 
          echo "${{ env.ANDROID_SDK_ROOT }}/emulator" >> $GITHUB_PATH 
          
          # Membuat AVD. Gunakan --force untuk menimpa jika sudah ada,
          # ini penting untuk memastikan AVD ada dan valid di setiap run.
          echo "no" | avdmanager create avd -n ${{ env.AVD_NAME }} -k "system-images;android-${{ env.ANDROID_API }};google_apis;x86_64" --device "pixel" --force
          
          # Cek AVD yang tersedia (untuk debug)
          avdmanager list avd

      - name: üì± Start Android Emulator in Background
        run: |
          # Path emulator seharusnya sudah ada di GITHUB_PATH dari langkah sebelumnya
          echo "Memulai Android Emulator..."
          # Argumen '-no-window' dihilangkan
          nohup emulator -avd ${{ env.AVD_NAME }} -gpu swiftshader_indirect -no-audio -accel off &
          
          echo "Menunggu 120 detik agar emulator boot..."
          sleep 20 
          
          # Cek status AVD
          adb devices
          
      - name: ‚è≥ Keep alive
        run: |
          mins=${{ steps.cfg.outputs.runtime }}
          start_time=$(date +%s)
          end_time=$((start_time + mins * 60))

          while [ $(date +%s) -lt $end_time ]; do
            current_time=$(date +%s)
            left_seconds=$((end_time - current_time))
            left_minutes=$((left_seconds / 60))
            echo "VNC alive... ($left_minutes min left)"
            
            adb devices
            
            sleep 60
          done

      - name: üõë Stop VNC Server and Emulator
        if: always()
        run: |
          echo "Menghentikan VNC Server..."
          vncserver -kill :1 || true
          
          echo "Menghentikan Emulator..."
          adb emu kill || true
          
      - name: Clean up apt cache
        run: |
          sudo rm -f /var/cache/apt/archives/lock
          sudo rm -f /var/lib/apt/lists/lock
          sudo rm -rf /var/cache/apt/archives/partial
          sudo rm -rf /var/lib/apt/lists/partial
