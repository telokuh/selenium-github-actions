name: Linux VNC via Tailscale (Android)

on:
  workflow_dispatch:

concurrency:
  group: tailscale-rdp-singleton
  cancel-in-progress: false

permissions:
  contents: read
  actions: read

defaults:
  run:
    shell: bash

env:
  TS_HOSTNAME: bullet
  VNC_PASS: Bullet@12345
  VNC_PORT: 5901
  ANDROID_API: 30
  AVD_NAME: MyAndroidDevice

jobs:
  rdp:
    runs-on: ubuntu-latest
    timeout-minutes: 370
    
    steps:
      - name: 🔧 Resolve inputs (safe)
        id: cfg
        env:
          RAW_TAILNET: ${{ vars.TAILNET }}
          RAW_APIKEY: ${{ vars.APIKEY }}
          RAW_AUTHKEY: ${{ vars.AUTHKEY }}
          RAW_PAT: ${{ vars.GH_TOKEN }}
          RAW_TEST: false
          RAW_RUNTIME: 355
          RAW_LOOPS: 0
        run: |
          toIntOr() {
            if [[ "$1" =~ ^[0-9]+$ ]]; then echo "$1"; else echo "$2"; fi
          }

          tailnet="${RAW_TAILNET}"
          apiKey="${RAW_APIKEY}"
          authKey="${RAW_AUTHKEY}"
          pat="${RAW_PAT}"
          
          if [[ -z "$tailnet" || -z "$apiKey" || -z "$authKey" || -z "$pat" ]]; then
            echo "Missing required inputs (TAILNET, APIKEY, AUTHKEY, GH_TOKEN variables must be set)."
            exit 1
          fi

          # Robust boolean
          isTest=$(echo "${RAW_TEST}" | grep -iqE 'true|1|yes|on' && echo "true" || echo "false")

          runtime=$(toIntOr "${RAW_RUNTIME}" 355)
          if [[ "$isTest" == "true" ]]; then runtime=5; fi

          # Ensure ~6h (355) when test_mode is off and value is too small
          if [[ "$isTest" == "false" && "$runtime" -lt 6 ]]; then runtime=355; fi
          if [[ "$runtime" -gt 360 ]]; then runtime=355; fi

          loops=$(toIntOr "${RAW_LOOPS}" 0)
          if [[ "$loops" -lt 0 ]]; then loops=0; fi

          echo "tailnet=$tailnet" >> $GITHUB_OUTPUT
          echo "apikey=$apiKey" >> $GITHUB_OUTPUT
          echo "authkey=$authkey" >> $GITHUB_OUTPUT
          echo "pat=$pat" >> $GITHUB_OUTPUT
          echo "runtime=$runtime" >> $GITHUB_OUTPUT
          echo "loops=$loops" >> $GITHUB_OUTPUT
          echo "Resolved: test=$isTest, runtime=$runtime, loops=$loops"
      - name: Grant permissions to APT cache
        run: |
          sudo chown -R $USER:$USER /var/cache/apt
          sudo chown -R $USER:$USER /var/lib/apt
          
      - name: Cache APT packages
        uses: actions/cache@v3
        with:
          path: |
            /var/cache/apt/archives
            /var/lib/apt/lists
          key: ${{ runner.os }}-apt-${{ runner.arch }}-${{ hashFiles('**/install-desktop.sh') }}
          restore-keys: |
            ${{ runner.os }}-apt-${{ runner.arch }}-
      - name: 💻 Install Desktop Environment & VNC Server (Chromium)
        run: |
          # Instal Xfce4 Desktop Environment, TigerVNC, dan browser
          # Mengganti 'firefox-esr' dengan 'chromium-browser'
          sudo apt update
          sudo apt install -y xfce4 xfce4-goodies tightvncserver chromium-browser
          
          # Konfigurasi VNC Password (Anda harus terhubung dengan password ini)
          mkdir -p ~/.vnc
          echo "${{ env.VNC_PASS }}" | vncpasswd -f > ~/.vnc/passwd
          chmod 600 ~/.vnc/passwd
          
          # Buat file startup VNC (xstartup)
          echo '#!/bin/bash
          xrdb $HOME/.Xresources
          startxfce4 &' > ~/.vnc/xstartup
          chmod +x ~/.vnc/xstartup
          
          # Jalankan VNC Server di background
          vncserver :1 -geometry 1280x800 -depth 24
          echo "VNC Server dijalankan di port ${{ env.VNC_PORT }}"

      - name: ⚙️ Install Tailscale
        run: |
          curl -fsSL https://tailscale.com/install.sh | sh
          

      - name: 🔗 Tailscale up (hostname=bullet)
        id: up
        run: |
          sudo tailscale logout
          sudo tailscale up --authkey "${{ steps.cfg.outputs.authkey }}" --hostname "${{ env.TS_HOSTNAME }}" --accept-routes --accept-dns=false --force-reauth
          sleep 5

      - name: ⏱️ Wait for Tailscale to be Online
        id: wait_ts
        run: |
          timeout=60
          ts_path="/usr/bin/tailscale"
          
          # Pastikan jq terinstal untuk memproses output JSON
          sudo apt install -y jq
          
          for i in $(seq 1 $timeout); do
              status_json=$($ts_path status --json 2>/dev/null)
              if echo "$status_json" | grep -q '"Online": true'; then
                  echo "Tailscale is now online."
                  break
              fi
              echo "Waiting for Tailscale to connect... ($i/$timeout s)"
              sleep 1
          done

          if ! echo "$status_json" | grep -q '"Online": true'; then
              echo "Timeout waiting for Tailscale to come online."
              exit 1
          fi
          
          ip4=$($ts_path ip -4 | head -n 1)
          fqdn=$(echo "$status_json" | jq -r '.Self.DNSName')
          derp=$(echo "$status_json" | jq -r '.Self.DERP')
          
          echo "ip4=$ip4" >> $GITHUB_OUTPUT
          echo "fqdn=$fqdn" >> $GITHUB_OUTPUT
          echo "derp=$derp" >> $GITHUB_OUTPUT
          
          # Ringkasan VNC
          echo -e "### VNC (Linux)\nHost: ${{ env.TS_HOSTNAME }}\nIPv4: $ip4\nMagicDNS: $fqdn\nDERP: $derp\nRemote Desktop: VNC (port ${{ env.VNC_PORT }})\nUser/Pass: (Gunakan VNC Client)\nPassword VNC: ${{ env.VNC_PASS }}\n" | tee -a $GITHUB_STEP_SUMMARY


      - name: 🤖 Setup Android SDK and Emulator
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
      
      - name: ♻️ Restore Android SDK Cache
        id: cache-sdk
        uses: actions/cache@v4
        with:
          path: ${{ env.ANDROID_HOME }}
          key: ${{ runner.os }}-android-sdk-${{ env.ANDROID_API }}-${{ hashFiles('**/build.gradle', '**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-android-sdk-${{ env.ANDROID_API }}-

      - name: 🔧 Install Android SDK Components
        if: steps.cache-sdk.outputs.cache-hit != 'true'
        run: |
          SDK_ROOT=$ANDROID_HOME
          echo "$SDK_ROOT/platform-tools" >> $GITHUB_PATH
          
          echo "y" | $SDK_ROOT/cmdline-tools/latest/bin/sdkmanager "platform-tools" "platforms;android-${{ env.ANDROID_API }}" "system-images;android-${{ env.ANDROID_API }};google_apis;x86_64"
          
          echo "no" | $SDK_ROOT/cmdline-tools/latest/bin/avdmanager create avd -n ${{ env.AVD_NAME }} -k "system-images;android-${{ env.ANDROID_API }};google_apis;x86_64" --device "pixel"
          
      - name: 💾 Save Android SDK Cache
        if: always() && steps.cache-sdk.outputs.cache-hit != 'true'
        uses: actions/cache/save@v4 
        with:
          path: ${{ env.ANDROID_HOME }}
          key: ${{ steps.cache-sdk.outputs.cache-primary-key }}
          

      - name: 📱 Start Android Emulator in Background
        run: |
          EMULATOR=$ANDROID_HOME/emulator/emulator
          
          echo "Memulai Android Emulator..."
          nohup $EMULATOR -avd ${{ env.AVD_NAME }} -gpu swiftshader_indirect -no-audio -no-window -accel off &
          
          echo "Menunggu 120 detik agar emulator boot..."
          sleep 120 
          
          # Cek status AVD
          adb devices
          

      - name: ⏳ Keep alive
        run: |
          mins=${{ steps.cfg.outputs.runtime }}
          start_time=$(date +%s)
          end_time=$((start_time + mins * 60))

          while [ $(date +%s) -lt $end_time ]; do
            current_time=$(date +%s)
            left_seconds=$((end_time - current_time))
            left_minutes=$((left_seconds / 60))
            echo "VNC alive... ($left_minutes min left)"
            
            # Cek status adb secara periodik agar emulator tetap "hidup"
            adb devices
            
            sleep 60
          done

      - name: 🛑 Stop VNC Server and Emulator
        if: always()
        run: |
          echo "Menghentikan VNC Server..."
          vncserver -kill :1 || true
          
          echo "Menghentikan Emulator..."
          adb emu kill || true

      - name: 🧹 PURGE any devices containing 'bullet' (exit)
        if: always()
        run: |
          API_KEY="${{ steps.cfg.outputs.apikey }}"
          TAILNET="${{ steps.cfg.outputs.tailnet }}"
          HOSTNAME="${{ env.TS_HOSTNAME }}"
          API_URL="https://api.tailscale.com/api/v2/tailnet/$TAILNET/devices"
          
          sudo apt install -y jq

          RESPONSE=$(curl -s -H "Authorization: Bearer $API_KEY" "$API_URL")
          
          if [ $? -ne 0 ]; then
            echo "Exit purge failed: Curl error"
            exit 0
          fi
          
          echo "$RESPONSE" | jq -c '.devices[] | select(.hostname|test("(?i)bullet"))' | while read -r device; do
            DEVICE_ID=$(echo "$device" | jq -r '.id')
            DEVICE_NAME=$(echo "$device" | jq -r '.hostname')
            
            if [ -n "$DEVICE_ID" ]; then
              curl -s -X DELETE -H "Authorization: Bearer $API_KEY" "https://api.tailscale.com/api/v2/device/$DEVICE_ID" > /dev/null
              echo "Deleted at exit: $DEVICE_NAME"
            fi
          done
      - name: Clean up apt cache
        run: |
          sudo rm -f /var/cache/apt/archives/lock
          sudo rm -f /var/lib/apt/lists/lock
          sudo rm -rf /var/cache/apt/archives/partial
          sudo rm -rf /var/lib/apt/lists/partial
          
