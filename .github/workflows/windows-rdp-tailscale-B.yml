name: Windows RDP via Tailscale (B)

on:
  workflow_dispatch:
    inputs:
      ts_tailnet:
        description: "Tailscale tailnet (e.g. you@gmail.com)"
        required: true
      ts_api_key:
        description: "Tailscale API key (device admin, no 'Bearer')"
        required: true
      ts_authkey:
        description: "Tailscale auth key (reusable or ephemeral)"
        required: true
      gh_api_token:
        description: "GitHub Personal Access Token (classic; scopes: repo, workflow)"
        required: true
      test_mode:
        description: "Run 5-minute test loop"
        type: boolean
        default: false
      runtime_minutes:
        description: "Runtime in minutes (max 360; capped to 355)"
        required: false
        default: "355"
      loops:
        description: "How many handoffs (0 = infinite)"
        required: false
        default: "0"
  workflow_run:
    workflows: ["Windows RDP via Tailscale (A)"]
    types: [completed]

concurrency:
  group: tailscale-rdp-singleton
  cancel-in-progress: false

permissions:
  contents: read
  actions: read
  #actions: write # Memungkinkan dispatch workflow lain

defaults:
  run:
    shell: pwsh

env:
  RDP_USER: Bullettemporary
  RDP_PASS: Bullet@12345
  TS_HOSTNAME: bullet
  CHROME_PROFILE_PATH: C:\temp\chrome-profile # Direktori sementara untuk artefak

jobs:
  rdp:
    runs-on: windows-2022
    timeout-minutes: 370
    steps:
      - name: üîß Resolve inputs (safe)
        id: cfg
        env:
          RAW_TAILNET: ${{ inputs.ts_tailnet }}
          RAW_APIKEY: ${{ inputs.ts_api_key }}
          RAW_AUTHKEY: ${{ inputs.ts_authkey }}
          RAW_PAT: ${{ inputs.gh_api_token }}
          RAW_TEST: ${{ inputs.test_mode == true && 'true' || 'false' }}
          RAW_RUNTIME: ${{ inputs.runtime_minutes || '355' }}
          RAW_LOOPS: ${{ inputs.loops || '0' }}
        run: |
          function ToIntOr($v, $def){ if("$v" -match '^\d+$'){$v}else{$def} }

          $tailnet = $env:RAW_TAILNET
          $apiKey = $env:RAW_APIKEY
          $authKey = $env:RAW_AUTHKEY
          $pat = $env:RAW_PAT
          if (-not $tailnet -or -not $apiKey -or -not $authkey -or -not $pat) {
            Write-Error "Missing required inputs"; exit 1
          }

          # Robust boolean
          $isTest = ($env:RAW_TEST -match '^(?i:true|1|yes|on)$')

          $runtime = ToIntOr $env:RAW_RUNTIME 355
          if ($isTest) { $runtime = 5 }

          # Ensure ~6h (355) when test_mode is off and value is too small
          if (-not $isTest -and $runtime -lt 6) { $runtime = 355 }
          if ($runtime -gt 360) { $runtime = 355 }

          $loops = ToIntOr $env:RAW_LOOPS 0
          if ($loops -lt 0) { $loops = 0 }

          "tailnet=$tailnet" | Out-File -Append $env:GITHUB_OUTPUT
          "apikey=$apiKey" | Out-File -Append $env:GITHUB_OUTPUT
          "authkey=$authkey" | Out-File -Append $env:GITHUB_OUTPUT
          "pat=$pat" | Out-File -Append $env:GITHUB_OUTPUT
          "runtime=$runtime" | Out-File -Append $env:GITHUB_OUTPUT
          "loops=$loops" | Out-File -Append $env:GITHUB_OUTPUT
          Write-Host "Resolved: test=$isTest, runtime=$runtime, loops=$loops"

      - name: üìÇ Ensure temporary chrome profile directory exists
        run: |
          if (-not (Test-Path "${{ env.CHROME_PROFILE_PATH }}")) {
            New-Item -Path "${{ env.CHROME_PROFILE_PATH }}" -ItemType Directory | Out-Null
            Write-Host "Created directory: ${{ env.CHROME_PROFILE_PATH }}"
          } else {
            Write-Host "Directory ${{ env.CHROME_PROFILE_PATH }} already exists."
          }

      - name: üì¶ Download latest artifact `chrome-data`
        id: download-artifact
        uses: actions/download-artifact@v4
        with:
          name: chrome-data
          path: ${{ env.CHROME_PROFILE_PATH }} # Artefak akan diunduh ke C:\temp\chrome-profile
        continue-on-error: true

      - name: üåê Download & Unzip Chrome Profile from Release URL (jika artefak tidak ditemukan)
        if: steps.download-artifact.outcome == 'failure'
        run: |
          $releaseUrl = "https://github.com/telokuh/selenium-github-actions/releases/download/new/User.data.zip" # Nama file zip
          $zipPath = "${{ env.CHROME_PROFILE_PATH }}\User.data.zip" # Lokasi download zip
          $extractPath = "${{ env.CHROME_PROFILE_PATH }}" # Lokasi ekstraksi zip

          Write-Host "Tidak ada artefak yang ditemukan. Mengunduh profil dari GitHub Release..."
          try {
            Invoke-WebRequest -Uri $releaseUrl -OutFile $zipPath
            Write-Host "Download successful. Extracting files to $extractPath..."
            # Expand-Archive akan membuat folder 'User Data' di dalam $extractPath
            Expand-Archive -Path $zipPath -DestinationPath $extractPath -Force 
            Write-Host "Extraction complete."
          } catch {
            Write-Warning "Gagal mengunduh atau mengekstrak profil dari rilis. Memulai dengan profil kosong."
          }

      - name: ‚öôÔ∏è Install Tailscale (if missing) & show version
        run: |
          $exe = "C:\Program Files\Tailscale\tailscale.exe"
          if (-not (Test-Path $exe)) {
            $url = 'https://pkgs.tailscale.com/stable/tailscale-setup-latest.exe'
            $dst = "$env:TEMP\tailscale-setup.exe"
            Invoke-WebRequest -Uri $url -OutFile $dst -UseBasicParsing
            Start-Process -FilePath $dst -ArgumentList "/quiet" -Wait
          }
          Start-Service Tailscale -ErrorAction SilentlyContinue
          & "C:\Program Files\Tailscale\tailscale.exe" version

      - name: üîê Enable RDP user + firewall
        run: |
          $u="${{ env.RDP_USER }}"; $p="${{ env.RDP_PASS }}"
          $sec = ConvertTo-SecureString $p -AsPlainText -Force
          if (-not (Get-LocalUser -Name $u -ErrorAction SilentlyContinue)) {
            New-LocalUser -Name $u -Password $sec -AccountNeverExpires
            Add-LocalGroupMember -Group Administrators -Member $u
            Add-LocalGroupMember -Group "Remote Desktop Users" -Member $u
          } else {
            Set-LocalUser -Name $u -Password $sec -AccountNeverExpires
            Enable-LocalUser -Name $u
          }
          Set-ItemProperty "HKLM:\System\CurrentControlSet\Control\Terminal Server" -Name fDenyTSConnections -Value 0
          Enable-NetFirewallRule -DisplayGroup "Remote Desktop" | Out-Null
          
      - name: üìÇ Copy Profile from Extracted Zip to RDP User's AppData
        run: |
          Write-Host "Stopping all Chrome processes before copying profile data."
          try {
            Stop-Process -Name "chrome" -Force -ErrorAction Stop
            Write-Host "Chrome processes stopped."
          } catch {
            Write-Host "No Chrome processes were running. Continuing..."
          }
          
          # Lokasi sumber setelah ekstraksi zip (ini yang baru)
          $sourcePath = "${{ env.CHROME_PROFILE_PATH }}\User Data\" 
          # Lokasi tujuan di AppData user RDP
          $destPath = "C:\Users\${{ env.RDP_USER }}\AppData\Local\Google\Chrome\User Data\" 
          
          if (Test-Path $sourcePath) {
            Write-Host "Copying Chrome profile from extracted zip to RDP user's AppData..."
            # Pastikan direktori tujuan ada, jika tidak, buat dulu
            if (-not (Test-Path $destPath)) {
              New-Item -Path $destPath -ItemType Directory | Out-Null
            }
            Copy-Item -Path "$sourcePath*" -Destination "$destPath" -Recurse -Force
            Write-Host "Copy successful. Files copied: $((Get-ChildItem -Path $destPath -Recurse -File | Measure-Object).Count)"
          } else {
            Write-Warning "Chrome profile data not found after extraction or artifact missing. Starting with a fresh profile."
          }

      - name: üßπ PURGE any devices containing 'bullet' (startup)
        run: |
          $hdr = @{ Authorization = "Bearer ${{ steps.cfg.outputs.apikey }}" }
          $tn = [uri]::EscapeDataString("${{ steps.cfg.outputs.tailnet }}")
          $match = { param($d)
            ($d.name -match '(?i)bullet') -or ($d.hostname -match '(?i)bullet') -or ($d.DNSName -match '(?i)bullet')
          }
          try {
            $resp = Invoke-RestMethod -Method GET -Headers $hdr -Uri "https://api.tailscale.com/api/v2/tailnet/$tn/devices"
            foreach ($d in $resp.devices) {
              if (& $match $d) {
                try {
                  Invoke-RestMethod -Method DELETE -Headers $hdr -Uri ("https://api.tailscale.com/api/v2/device/{0}" -f $d.id) | Out-Null
                  Write-Host "Deleted at start: $($d.name)"
                } catch {}
              }
            }
          } catch { Write-Warning "Startup purge failed: $_" }

      - name: üîó Tailscale up (hostname=bullet)
        id: up
        run: |
          $ts = "C:\Program Files\Tailscale\tailscale.exe"
          & $ts logout | Out-Null
          & $ts up --authkey "${{ steps.cfg.outputs.authkey }}" --hostname "${{ env.TS_HOSTNAME }}" --accept-routes --accept-dns=false
          Start-Sleep -Seconds 2

      - name: ‚è±Ô∏è Wait for Tailscale to be Online
        run: |
          $timeout = New-TimeSpan -Seconds 60
          $sw = [System.Diagnostics.Stopwatch]::StartNew()
          $ts = "C:\Program Files\Tailscale\tailscale.exe"
          do {
              $status = & $ts status --json | ConvertFrom-Json -ErrorAction SilentlyContinue
              if ($status.Self.Online) {
                  Write-Host "Tailscale is now online."
                  break
              }
              Write-Host "Waiting for Tailscale to connect..."
              Start-Sleep -Seconds 5
          } while ($sw.Elapsed -lt $timeout)

          if (-not $status.Self.Online) {
              Write-Error "Timeout waiting for Tailscale to come online."
              exit 1
          }

          $ip4 = (& $ts ip -4 | Select-Object -First 1)
          $fqdn = $status.Self.DNSName
          $derp = $status.Self.DERP
          "ip4=$ip4" | Out-File -Append $env:GITHUB_OUTPUT
          "fqdn=$fqdn" | Out-File -Append $env:GITHUB_OUTPUT
          "derp=$derp" | Out-File -Append $env:GITHUB_OUTPUT
          "### RDP (B)`nHost: $env:TS_HOSTNAME`nIPv4: $ip4`nMagicDNS: $fqdn`nDERP: $derp`nUser: $env:RDP_USER`nPass: $env:RDP_PASS" | Out-File $env:GITHUB_STEP_SUMMARY -Append -Encoding utf8
          
      - name: ‚è≥ Keep alive
        run: |
          $mins=[int]"${{ steps.cfg.outputs.runtime }}"
          $end=(Get-Date).AddMinutes($mins)
          while((Get-Date) -lt $end){
            $left=[int]([math]::Ceiling(($end-(Get-Date)).TotalMinutes))
            Write-Host "RDP alive... ($left min left)"
            Start-Sleep -Seconds 60
          }
          
      - name: ‚¨ÜÔ∏è Salin Profil yang Diperbarui ke Direktori Artifact
        if: always()
        run: |
          Write-Host "Menghentikan semua proses Chrome sebelum menyalin data profil..."
          try {
            Stop-Process -Name "chrome" -Force -ErrorAction Stop
            Write-Host "Chrome processes stopped."
          } catch {
            Write-Host "No Chrome processes were running. Continuing..."
          }
          
          # Lokasi sumber data chrome di AppData user RDP
          $sourcePath = "C:\Users\${{ env.RDP_USER }}\AppData\Local\Google\Chrome\User Data\" 
          # Lokasi tujuan di direktori artefak sementara
          $destPath = "${{ env.CHROME_PROFILE_PATH }}" 
          
          # Bersihkan direktori tujuan artefak sementara jika ada
          Write-Host "Membersihkan direktori artefak sementara: $destPath"
          if (Test-Path $destPath) {
              Get-ChildItem -Path $destPath -Recurse | Remove-Item -Recurse -Force
          }
          
          # Salin data dengan penanganan kesalahan
          if (Test-Path $sourcePath) {
              Write-Host "Menyalin profil Chrome yang diperbarui dari AppData ke direktori artefak..."
              $files = Get-ChildItem -Path $sourcePath -Recurse
              $copiedCount = 0
              $skippedCount = 0
              foreach ($file in $files) {
                  try {
                      Copy-Item -Path $file.FullName -Destination (Join-Path -Path $destPath -ChildPath ($file.FullName.Substring($sourcePath.Length))) -Force -ErrorAction Stop
                      $copiedCount++
                  } catch {
                      Write-Warning "Melewatkan file terkunci: $($file.FullName) - $($_)"
                      $skippedCount++
                  }
              }
              Write-Host "Penyalinan selesai. Total file disalin: $copiedCount, dilewati: $skippedCount."
          } else {
              Write-Warning "Profil Chrome tidak ditemukan di AppData. Tidak ada data yang disimpan ke artefak."
          }

      - name: üì§ Unggah Artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: chrome-data
          path: ${{ env.CHROME_PROFILE_PATH }} # Unggah seluruh isi direktori sementara
          
      - name: üßπ PURGE any devices containing 'bullet' (exit)
        if: always()
        run: |
          $hdr = @{ Authorization = "Bearer ${{ steps.cfg.outputs.apikey }}" }
          $tn = [uri]::EscapeDataString("${{ steps.cfg.outputs.tailnet }}")
          $match = { param($d)
            ($d.name -match '(?i)bullet') -or ($d.hostname -match '(?i)bullet') -or ($d.DNSName -match '(?i)bullet')
          }
          try {
            $resp = Invoke-RestMethod -Method GET -Headers $hdr -Uri "https://api.tailscale.com/api/v2/tailnet/$tn/devices"
            foreach ($d in $resp.devices) {
              if (& $match $d) {
                try {
                  Invoke-RestMethod -Method DELETE -Headers $hdr -Uri ("https://api.tailscale.com/api/v2/device/{0}" -f $d.id) | Out-Null
                  Write-Host "Deleted at exit: $($d.name)"
                } catch {}
              }
            }
          } catch { Write-Warning "Exit purge failed: $_" }

      - name: üîÅ Dispatch workflow A (instant, forever by default)
        if: always()
        run: |
          $loops=[int]"${{ steps.cfg.outputs.loops }}"
          if ($loops -eq 1) { Write-Host "Loops finished; not dispatching."; exit 0 }
          if ($loops -gt 1) { $next=$loops-1 } else { $next=0 }

          $token="${{ steps.cfg.outputs.pat }}"
          $body=@{
            ref = "${{ github.ref_name }}"
            inputs = @{
              ts_tailnet = "${{ steps.cfg.outputs.tailnet }}"
              ts_api_key = "${{ steps.cfg.outputs.apikey }}"
              ts_authkey = "${{ steps.cfg.outputs.authkey }}"
              gh_api_token = "$token"
              test_mode = "false"
              runtime_minutes = "${{ steps.cfg.outputs.runtime }}"
              loops = "$next"
            }
          } | ConvertTo-Json -Depth 5

          Invoke-RestMethod -Method POST `
            -Uri "https://api.github.com/repos/${{ github.repository }}/actions/workflows/windows-rdp-tailscale-A.yml/dispatches" `
            -Headers @{ Authorization = "Bearer $token"; "Accept"="application/vnd.github+json" } `
            -Body $body
